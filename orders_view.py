#Author: Vodohleb04
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ordersApplication.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import config
from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
from decimal import Decimal
from order_tab import OrderTab
from orders_i_view import OrdersIView


class Ui_MainWindow(OrdersIView):

    def _make_central_widget(self):
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setStyleSheet(config.StyleSheet.MainWidgetBackground.value)
        self.centralWidget.setObjectName("centralWidget")

    def _make_central_widget_layout(self):
        self.centralWidgetLayout = QtWidgets.QGridLayout(self.centralWidget)
        self.centralWidgetLayout.setObjectName("gridLayout")

    def _make_remove_order_button(self):
        self.removeOrder = QtWidgets.QPushButton(self.centralWidget)
        self.removeOrder.setEnabled(False)
        self.removeOrder.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.removeOrder.setStyleSheet(config.StyleSheet.ButtonBackground.value)
        self.removeOrder.setObjectName("removeOrder")
        self.centralWidgetLayout.addWidget(self.removeOrder, 1, 2, 1, 1)

    def _make_add_order_button(self):
        self.addOrder = QtWidgets.QPushButton(self.centralWidget)
        self.addOrder.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.addOrder.setStyleSheet(config.StyleSheet.ButtonBackground.value)
        self.addOrder.setObjectName("addOrder")
        self.centralWidgetLayout.addWidget(self.addOrder, 1, 1, 1, 1)

    def _make_orders_table_widget(self):
        self.ordersTableWidget = QtWidgets.QTableWidget(self.centralWidget)

        self.ordersTableWidget.setStyleSheet(config.StyleSheet.WidgetWithItemsBackground.value)

        self.ordersTableWidget.setObjectName("tableWidget")
        self._set_order_table_vertical_headers()
        self._set_orders_table_widget_options()

        self.centralWidgetLayout.addWidget(self.ordersTableWidget, 0, 1, 1, 2)

    def _set_orders_table_widget_options(self):
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ordersTableWidget.sizePolicy().hasHeightForWidth())
        self.ordersTableWidget.setSizePolicy(sizePolicy)
        self.ordersTableWidget.setMinimumSize(680, 450)
        self.ordersTableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.ordersTableWidget.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.ordersTableWidget.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.ordersTableWidget.setAlternatingRowColors(False)
        self.ordersTableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.ordersTableWidget.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.ordersTableWidget.setCornerButtonEnabled(True)
        self.ordersTableWidget.setEditTriggers(QtWidgets.QTableWidget.EditTrigger.NoEditTriggers)

        __sortingEnabled = self.ordersTableWidget.isSortingEnabled()
        self.ordersTableWidget.setSortingEnabled(__sortingEnabled)

    def _set_order_table_vertical_headers(self):
        self.ordersTableWidget.setColumnCount(4)
        for i in range(4):
            item = QtWidgets.QTableWidgetItem()
            item.setBackground(QtGui.QColor(181, 181, 255))
            self.ordersTableWidget.setHorizontalHeaderItem(i, item)

    def _add_order_table_vertical_header(self):
        self.ordersTableWidget.setRowCount(self.ordersTableWidget.rowCount() + 1)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(181, 181, 255))
        item.setText(str(self.ordersTableWidget.rowCount()))
        self.ordersTableWidget.setVerticalHeaderItem(self.ordersTableWidget.rowCount() - 1, item)

    def emplace_order(self, order_id: int, created_at: datetime, customer: str, address: str):
        self._add_order_table_vertical_header()
        brush = QtGui.QBrush(QtGui.QColor(181, 181, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        order_id_item = QtWidgets.QTableWidgetItem()
        order_id_item.setBackground(brush)
        order_id_item.setText(str(order_id))
        row_to_insert = self.ordersTableWidget.rowCount() - 1
        self.ordersTableWidget.setItem(row_to_insert, config.OrdersTableColumnIndex.OrderId.value, order_id_item)
        created_at_item = QtWidgets.QTableWidgetItem()
        created_at_item.setBackground(brush)
        created_at_item.setText(str(created_at.strftime("%m.%d.%Y - %H:%M:%S")))
        self.ordersTableWidget.setItem(row_to_insert, config.OrdersTableColumnIndex.CreatedAt.value, created_at_item)
        customer_item = QtWidgets.QTableWidgetItem()
        customer_item.setBackground(brush)
        customer_item.setText(customer)
        self.ordersTableWidget.setItem(row_to_insert, config.OrdersTableColumnIndex.Customer.value, customer_item)
        address_item = QtWidgets.QTableWidgetItem()
        address_item.setBackground(brush)
        address_item.setText(address)
        self.ordersTableWidget.setItem(row_to_insert, config.OrdersTableColumnIndex.Address.value, address_item)

    def set_remove_order_button_enabled(self, enabled_flag: bool):
        self.removeOrder.setEnabled(enabled_flag)

    def remove_order_row(self, row_index: int):
        self.ordersTableWidget.removeRow(row_index)

    def _make_order_tabs_widget(self):
        self.orderTabsWidget = QtWidgets.QTabWidget(self.centralWidget)
        self.orderTabsWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.orderTabsWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.orderTabsWidget.setDocumentMode(False)
        self.orderTabsWidget.setTabsClosable(True)
        self.orderTabsWidget.setMovable(False)
        self.orderTabsWidget.setTabBarAutoHide(True)
        self.hide_order_tabs_widget()
        self.orderTabsWidget.setObjectName("orders_widget")
        self.centralWidgetLayout.addWidget(self.orderTabsWidget, 0, 0, 2, 1)

    def add_order_tab(self, order_id: int):
        self.orderTabsDict[order_id] = OrderTab(order_id)
        self.orderTabsWidget.addTab(self.orderTabsDict[order_id], "")
        self.orderTabsWidget.setTabText(
            self.orderTabsWidget.indexOf(self.orderTabsDict[order_id]),
            config.Titles.FormatOrderTabName.value.format(order_id))

    def _connect_signals_except_order_tab_signals(self):
        self.addOrder.clicked.connect(self.signalCommutator.addOrderClickedSignal.emit)
        self.removeOrder.clicked.connect(self.signalCommutator.removeOrderClickedSignal.emit)
        self.ordersTableWidget.itemSelectionChanged.connect(self.signalCommutator.selectedOrdersChangedSignal.emit)

    def _connect_order_tabs_widget_signals(self):
        self.orderTabsWidget.tabCloseRequested.connect(self.signalCommutator.closeOrderTabSignal)

    def remove_order_tab_from_widget(self, tab_index: int):
        self.orderTabsWidget.removeTab(tab_index)

    def get_question_box_result(self, title: str, message: str) -> QtWidgets.QMessageBox.StandardButton:
        result = QtWidgets.QMessageBox.question(
            self.centralWidget,
            title,
            message,
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            defaultButton=QtWidgets.QMessageBox.No)
        return result

    def show_error_box(self, title: str, message: str):
        error_box = QtWidgets.QMessageBox()
        error_box.setWindowTitle(title)
        error_box.setText(message)
        error_box.setIcon(QtWidgets.QMessageBox.Icon.Critical)
        error_box.adjustSize()
        error_box.exec()

    def show_warning_box(self, title: str, message: str):
        warning_box = QtWidgets.QMessageBox()
        warning_box.setWindowTitle(title)
        warning_box.setText(message)
        warning_box.setIcon(QtWidgets.QMessageBox.Icon.Warning)
        warning_box.adjustSize()
        warning_box.exec()

    def hide_order_tabs_widget(self):
        self.orderTabsWidget.setEnabled(False)
        self.orderTabsWidget.setVisible(False)

    def show_order_tabs_widget(self):
        self.orderTabsWidget.setVisible(True)
        self.orderTabsWidget.setEnabled(True)

    def setupUi(self, MainWindow):
        super().__init__()
        MainWindow.setObjectName("mainWindow")
        MainWindow.resize(*config.BasicSizes.MainWindow.value)
        MainWindow.setMinimumSize(*config.BasicSizes.MainWindow.value)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(config.Icons.MainIcon.value), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet(config.StyleSheet.ToolTip.value)

        self._make_central_widget()
        self._make_central_widget_layout()

        self._make_remove_order_button()
        self._make_add_order_button()

        self._make_orders_table_widget()

        self._make_order_tabs_widget()
        self._connect_signals_except_order_tab_signals()
        self._connect_order_tabs_widget_signals()

        self.orderTabsWidget.setEnabled(True)  # TODO
        self.orderTabsWidget.setVisible(True)  # TODO
        self.add_order_tab(1)  # TODO
        self.add_order_tab(2)  # TODO

        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        self.orderTabsWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.emplace_order(1, datetime.now(), 'c', 'a')  # TODO
        self.emplace_order(2, datetime.now(), 'c', 'a')  # TODO
        self.orderTabsDict[1].emplace_order_item('Боровик', Decimal(0.2), 5, 1)  # TODO
        self.orderTabsDict[1].emplace_order_item('Лисичка', Decimal(0.05), 15, 2)  # TODO

    def _retranslate_titles(self, _translate):
        self.removeOrder.setText(_translate("MainWindow", config.Titles.RemoveOrderTitle.value))
        self.addOrder.setText(_translate("MainWindow", config.Titles.AddOrderTitle.value))

    def _retranslate_tool_tips(self, _translate):
        self.removeOrder.setToolTip(_translate("MainWindow", config.ToolTips.RemoveOrderTip.value))
        self.addOrder.setToolTip(_translate("MainWindow", config.ToolTips.AddOrderTip.value))

    def _retranslate_shortcuts(self, _translate):
        self.removeOrder.setShortcut(_translate("MainWindow", config.Shortcuts.RemoveOrderShortcut.value))
        self.addOrder.setShortcut(_translate("MainWindow", config.Shortcuts.AddOrderShortcut.value))

    def _rentranslate_orders_table_horizontal_headers(self, _translate):
        item = self.ordersTableWidget.horizontalHeaderItem(config.OrdersTableColumnIndex.OrderId.value)
        item.setText(_translate("MainWindow", config.Titles.OrdersIdHeader.value))
        item = self.ordersTableWidget.horizontalHeaderItem(config.OrdersTableColumnIndex.CreatedAt.value)
        item.setText(_translate("MainWindow", config.Titles.OrdersCreatedAtHeader.value))
        item = self.ordersTableWidget.horizontalHeaderItem(config.OrdersTableColumnIndex.Customer.value)
        item.setText(_translate("MainWindow", config.Titles.OrdersCustomerHeader.value))
        item = self.ordersTableWidget.horizontalHeaderItem(config.OrdersTableColumnIndex.Address.value)
        item.setText(_translate("MainWindow", config.Titles.OrdersAddressHeader.value))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

        MainWindow.setWindowTitle(_translate("MainWindow", config.Titles.MainWindowTitle.value))
        self._retranslate_titles(_translate)
        self._retranslate_tool_tips(_translate)
        self._retranslate_shortcuts(_translate)

        self._rentranslate_orders_table_horizontal_headers(_translate)




import sys
from orders_presenter import OrdersPresenter
from model import OrdersModel
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
m = OrdersModel()
p = OrdersPresenter(ui, model=m, user='postgres', password='kokakola23')
p._connect_order_tab(1)
p._connect_order_tab(2)
sys.exit(app.exec_())
